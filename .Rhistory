tm <- seq(0, 600, by = 10)
y <- months$total.deaths
y2<- months$total.injured
x <- seq(12)
p <- plot_ly(x = ~x, y = ~y, name = 'killed',type = "bar",width = '2')%>%
add_trace(y = ~y2, name = 'Injured')%>%
layout(yaxis = list(title = 'Count'), barmode = 'group')
summary.shooting.data <- mutate( shooting.data,  Days.ago = (today - as.Date(date, format = "%B %d, %Y"))  ),mutate( shooting.data,  month.of.shooting = substring(as.Date(date, format = "%B %d, %Y"),6,7 ) )
summary.shooting.data <- mutate( shooting.data,  Days.ago = (today - as.Date(date, format = "%B %d, %Y"))  )%>% mutate( shooting.data,  month.of.shooting = substring(as.Date(date, format = "%B %d, %Y"),6,7 ) )
today = as.Date(Sys.Date())
summary.shooting.data$Days.ago <- mutate( shooting.data,  Days.ago = (today - as.Date(date, format = "%B %d, %Y"))  )
summary.shooting.data$month.of.shooting <- mutate( shooting.data,  month.of.shooting = substring(as.Date(date, format = "%B %d, %Y"),6,7 ) )
mutate( shooting.data,  month.of.shooting = substring(as.Date(date, format = "%B %d, %Y"),6,7 ) ) % select(month.of.shooting)
summary.shooting.data <- mutate( shooting.data,  Days.ago = (today - as.Date(date, format = "%B %d, %Y"))  )
summary.shooting.data <- mutate( shooting.data,  month.of.shooting = substring(as.Date(date, format = "%B %d, %Y"),6,7 ) )
summary.shooting.data <-
summary.shooting.data <- mutate( shooting.data,  month.of.shooting = substring(as.Date(date, format = "%B %d, %Y"),6,7 ) ) %>%  mutate(  Days.ago = (today - as.Date(date, format = "%B %d, %Y"))  )
months <-  summarise(group_by(summary.shooting.data, month.of.shooting), total.deaths = sum(killed),total.injured = sum(injured))
knitr::opts_chunk$set(echo = TRUE)
library('dplyr')
library('stringr')
require('knitr')
library('plotly')
shooting.data <- read.csv('data/shootings-2016.csv')
total.shootings <- count(select(shooting.data, killed) )
total.deaths <- sum(select(shooting.data, killed) )
most.affected.cities <- filter(shooting.data, killed > 5) %>% select(city,killed)
number.of.affected.cities.washington <- length(filter(shooting.data, state == 'Washington'))
today = as.Date(Sys.Date())
summary.shooting.data <-
summary.shooting.data <- mutate( shooting.data,  month.of.shooting = substring(as.Date(date, format = "%B %d, %Y"),6,7 ) ) %>%  mutate(  Days.ago = (today - as.Date(date, format = "%B %d, %Y"))  )
months <-  summarise(group_by(summary.shooting.data, month.of.shooting), total.deaths = sum(killed),total.injured = sum(injured))
#install.packages('leaflet')
library('leaflet')
shooting.data$hover <- with(shooting.data, paste("City: ", city, ", Killed: ", killed,', Injured: ', injured, ", Date: ", date))
pal <- colorFactor(c("navy", "red","blue","green","yellow"), domain = c("ship", "pirate"))
qpal <- colorQuantile("RdYlBu", shooting.data$killed, n = 3)
m <- leaflet(data = shooting.data) %>%
addTiles() %>%
addCircleMarkers(~lng, ~lat, radius = ~killed * 2, fillOpacity = ~injured * -0.1 + .5 ,
label = ~hover)
today <- Sys.Date()
tm <- seq(0, 600, by = 10)
y <- months$total.deaths
y2<- months$total.injured
x <- seq(12)
p <- plot_ly(x = ~x, y = ~y, name = 'killed',type = "bar",width = '2')%>%
add_trace(y = ~y2, name = 'Injured')%>%
layout(yaxis = list(title = 'Count'), barmode = 'group')
today = as.Date(Sys.Date())
summary.shooting.data <- mutate( shooting.data,  month.of.shooting = substring(as.Date(date, format = "%B %d, %Y"),6,7 ) ) %>%  mutate(  Days.ago = (today - as.Date(date, format = "%B %d, %Y"))  )
months <-  summarise(group_by(summary.shooting.data, month.of.shooting), total.deaths = sum(killed),total.injured = sum(injured))
knitr::opts_chunk$set(echo = TRUE)
library('dplyr')
library('stringr')
require('knitr')
library('plotly')
shooting.data <- read.csv('data/shootings-2016.csv')
total.shootings <- count(select(shooting.data, killed) )
total.deaths <- sum(select(shooting.data, killed) )
most.affected.cities <- filter(shooting.data, killed > 5) %>% select(city,killed)
number.of.affected.cities.washington <- length(filter(shooting.data, state == 'Washington'))
today = as.Date(Sys.Date())
expanded.shooting.data <- mutate( shooting.data,  month.of.shooting = substring(as.Date(date, format = "%B %d, %Y"),6,7 ) ) %>%  mutate(  Days.ago = (today - as.Date(date, format = "%B %d, %Y"))  )
months <-  summarise(group_by(expanded.shooting.data, month.of.shooting), total.deaths = sum(killed),total.injured = sum(injured))
summary.shooting.data <- months
#install.packages('leaflet')
library('leaflet')
shooting.data$hover <- with(shooting.data, paste("City: ", city, ", Killed: ", killed,', Injured: ', injured, ", Date: ", date))
pal <- colorFactor(c("navy", "red","blue","green","yellow"), domain = c("ship", "pirate"))
qpal <- colorQuantile("RdYlBu", shooting.data$killed, n = 3)
m <- leaflet(data = shooting.data) %>%
addTiles() %>%
addCircleMarkers(~lng, ~lat, radius = ~killed * 2, fillOpacity = ~injured * -0.1 + .5 ,
label = ~hover)
today <- Sys.Date()
tm <- seq(0, 600, by = 10)
y <- months$total.deaths
y2<- months$total.injured
x <- seq(12)
p <- plot_ly(x = ~x, y = ~y, name = 'killed',type = "bar",width = '2')%>%
add_trace(y = ~y2, name = 'Injured')%>%
layout(yaxis = list(title = 'Count'), barmode = 'group')
kable(summary.shooting.data)
months <-  summarise(group_by(expanded.shooting.data, month.of.shooting), total.deaths = sum(killed),total.injured = sum(injured), state.with.most.deaths = state)
months <-  summarise(group_by(expanded.shooting.data, month.of.shooting), total.deaths = sum(killed),total.injured = sum(injured), state.with.most.deaths = state)
months <-  summarise(group_by(expanded.shooting.data, month.of.shooting), total.deaths = sum(killed),total.injured = sum(injured), states = max(killed))
months <-  summarise(group_by(expanded.shooting.data, month.of.shooting), total.deaths = sum(killed),total.injured = sum(injured), largest.shooting = max(state))
months <-  summarise(group_by(expanded.shooting.data, month.of.shooting), total.deaths = sum(killed),total.injured = sum(injured), largest.shooting = mean(state))
months <-  summarise(group_by(expanded.shooting.data, month.of.shooting), total.deaths = sum(killed),total.injured = sum(injured), largest.shooting = max(killed))
months <-  summarise(group_by(expanded.shooting.data, month.of.shooting), total.deaths = sum(killed),total.injured = sum(injured), largest.shooting = max(killed), mean.deaths = mean(killed))
filter(shooting.data, city == 'Orlando') %>% select(killed)`
filter(shooting.data, city == 'Orlando') %>% select(killed)
s
filter(shooting.data, city == 'Orlando') %>% select(killed)`
filter(shooting.data, city == 'Orlando') %>% select(killed)
v = filter(shooting.data, city == 'Orlando') %>% select(killed)
v = filter(shooting.data, city == 'Orlando')
v = filter(shooting.data, city == 'Orlando') %>% select(killed)
v = filter(shooting.data, city == 'Orlando')
v = filter(shooting.data, city = 'Orlando')
v = filter(shooting.data, city = 'Orlando')
v = filter(shooting.data, city = 'Orlando')
v = filter(shooting.data, city == 'Orlando')
v = filter(shooting.data, city == 'Orlando')  %>% select(killed)
View(v)
v = filter(shooting.data, city == 'Orlando')  %>% select(max(killed))
View(v)
v = filter(shooting.data, city == 'Orlando', state == 'Florida')  %>% select(max(killed))
View(v)
v = filter(shooting.data, city == 'Orlando', state == 'Florida')  %>% select(max(killed))
v = filter(shooting.data, city == 'Orlando', state == 'Florida')  %>% select(killed = mex(killed))
v = filter(shooting.data, city == 'Orlando', state == 'Florida')  %>% select(killed == mex(killed))
v = filter(shooting.data, city == 'Orlando', state == 'Florida')  %>% select(killed == max(killed))
v = filter(shooting.data, city == 'Orlando', state == 'Florida')  %>% select(killed = max(killed))
View(v)
v = filter(shooting.data, city == 'Orlando', state == 'Florida')  %>% select(killed = max(killed))
View(v)
v = filter(shooting.data, city == 'Orlando', state == 'Florida')  %>% select(killed == max(killed))
v = filter(shooting.data, city == 'Orlando', state == 'Florida',date == 'June 12, 2016')
v = filter(shooting.data, city == 'Orlando', state == 'Florida',date == 'June 12, 2016')  %>% select(killed)
filter(shooting.data, killed == 50, state == 'Florida')  %>% select(date)
number.of.affected.cities.washington[0,1]
number.of.affected.cities.washington[1,1]
number.of.affected.cities.washington[2,2]
most.affected.cities[2,2]
1,2
most.affected.cities[1,2]
View(most.affected.cities)
most.affected.cities['city'][1]
most.affected.cities['city'][0]
most.affected.cities[1]['city'][1]
most.affected.cities[1][1]
most.affected.cities[1,1]
library(shiny)
runApp('C:/Users/ermmc/OneDrive/Classes/201/m18-shiny/exercise-5')
install.packages(HSAUR)
install.packages(HSUAR)
install.packages("HSAUR")
#INFO 201 M18 Exercise 5 UI
#Require shiny
library(shiny)
data("womensrole", package = "HSAUR")
#Here you will define the functionality of your user interface
shinyUI(fluidPage(
# Add a descriptive application title
titlePanel("This app does cool things"),
# Here you will add the interactivity to your app
# Create a selectInput where the user can select either Men, Women, or Both.
# Create a selectInput where the user can select if they Agree or Disagree.
# Look at the Shiny documentation for selectInput and sliderInput syntax
# inputIDs's have been provided
sidebarLayout(
sidebarPanel(
#selectInput for Men, Women, or Both
#inputID = sex
#selectInput for Agree or Disagree
#inputID = thoughts
),
# Show a plot of the generated distribution
mainPanel(
#give your plot a descriptive name
plotOutput("plotNamehere")
)
)
))
library("HSAUR")
#INFO 201 M18 Exercise 5 UI
#Require shiny
library(shiny)
library("HSAUR")
data("womensrole", package = "HSAUR")
#Here you will define the functionality of your user interface
shinyUI(fluidPage(
# Add a descriptive application title
titlePanel("This app does cool things"),
# Here you will add the interactivity to your app
# Create a selectInput where the user can select either Men, Women, or Both.
# Create a selectInput where the user can select if they Agree or Disagree.
# Look at the Shiny documentation for selectInput and sliderInput syntax
# inputIDs's have been provided
sidebarLayout(
sidebarPanel(
#selectInput for Men, Women, or Both
#inputID = sex
#selectInput for Agree or Disagree
#inputID = thoughts
),
# Show a plot of the generated distribution
mainPanel(
#give your plot a descriptive name
plotOutput("plotNamehere")
)
)
))
data = data("womensrole", package = "HSAUR")
library(shiny)
library("HSAUR")
data = data("womensrole", package = "HSAUR")
#Here you will define the functionality of your user interface
shinyUI(
#INFO 201 M18 Exercise 5 UI
#Require shiny
library(shiny)
data = data("womensrole", package = "HSAUR")
#Here you will define the functionality of your user interface
shinyUI(fluidPage(
# Add a descriptive application title
titlePanel("This app does cool things"),
# Here you will add the interactivity to your app
# Create a selectInput where the user can select either Men, Women, or Both.
# Create a selectInput where the user can select if they Agree or Disagree.
# Look at the Shiny documentation for selectInput and sliderInput syntax
# inputIDs's have been provided
sidebarLayout(
sidebarPanel(
#selectInput for Men, Women, or Both
#inputID = sex
#selectInput for Agree or Disagree
#inputID = thoughts
),
# Show a plot of the generated distribution
mainPanel(
#give your plot a descriptive name
plotOutput("plotNamehere")
)
)
))
library(shiny)
data = data("womensrole", package = "HSAUR")
data("womensrole", package = "HSAUR")
data("womensrole", package = "HSAUR")
knitr::opts_chunk$set(echo = TRUE)
collison <- read.csv('data/SDOT_Collisions.csv')
setwd("C:/Users/ermmc/Desktop/seattle-collisions")
knitr::opts_chunk$set(echo = TRUE)
collison <- read.csv('data/SDOT_Collisions.csv')
library('leaflet')
library('stringr')
## creates interactive map
pal <- colorFactor(c("navy", "red","blue","green","yellow"), domain = c("ship", "pirate"))
#qpal <- colorQuantile("RdYlBu", shooting.data$killed, n = 3)
location = data.frame()
collison$lat = collison$Shape[1]
strsplit(collison$lat[1,2], ",")
lat = as.double(ma$lat)
ma = data.frame(lat,long)
library('leaflet')
library('stringr')
## creates interactive map
pal <- colorFactor(c("navy", "red","blue","green","yellow"), domain = c("ship", "pirate"))
#qpal <- colorQuantile("RdYlBu", shooting.data$killed, n = 3)
location = data.frame()
collison$lat = collison$Shape[1]
strsplit(collison$lat[1,2], ",")
library('leaflet')
library('stringr')
## creates interactive map
pal <- colorFactor(c("navy", "red","blue","green","yellow"), domain = c("ship", "pirate"))
#qpal <- colorQuantile("RdYlBu", shooting.data$killed, n = 3)
d = data.frame(str_split(as.character(collison$Shape), " ") )
long = data.frame(unlist(d[2,]))
lat = data.frame(unlist(d[1,]))
names(lat) = "lat"
names(long) = "long"
lat = as.vector(lat$lat)
long = as.vector(long$long)
lat = str_replace(lat, "\\(",  "")
lat = str_replace(lat, "\\)",  "")
lat = str_replace(lat, "\\,",  "")
long = str_replace(long, "\\,",  "")
long = str_replace(long, "\\(",  "")
long = str_replace(long, "\\)",  "")
ma = data.frame(lat,long)
ma = ma[!apply(ma == "", 1, all),]
lat = as.double(ma$lat)
lng = as.double(ma$long)
m <- leaflet(ma) %>%
addTiles() %>%
addMarkers(as.numeric((~lat)),as.numeric((~long)))
lat =  lat[sample(nrow(df), 100, prob = prb),]
lat =  lat[sample(nrow(lat), 100),]
lat =  sample_n(lat, 100)
library('dplyr')
lat =  sample_n(lat, 100)
lat =  as.double(sample_n(ma$lat, 100))
lat =  sample_n(ma$lat, 100)
lat =  sample_n(ma, 100)
lat =  sample_n(ma, 100)
lat = as.double(lat$lat)
lng = as.double(lat$long)
lat =  sample_n(ma, 100)
View(lat)
View(lat)
sample =  sample_n(ma, 100)
lat = as.double(sample$lat)
lng = as.double(sample$long)
m <- leaflet(ma) %>%
addTiles() %>%
addMarkers(as.numeric(lat,long)
m <- leaflet(ma) %>%
m <- leaflet(ma) %>%
addTiles() %>%
addMarkers(lat,long)
m <- leaflet(ma) %>%
addTiles() %>%
addMarkers(lat,lng)
m
lat = sample$lat
lng = sample$long
m <- leaflet(ma) %>%
addTiles() %>%
addMarkers(lat,lng)
lat = str(sample$lat)
lng = sample$long
lat = str(sample$lat)
lat = as.numeric(levels(sample$lat))[sample$lat]
lng = as.numeric(levels(sample$lng))[sample$lng]
m <- leaflet(ma) %>%
addTiles() %>%
addMarkers(lat,lng)
lng = as.numeric(levels(sample$long))[sample$long]
m <- leaflet(ma) %>%
addTiles() %>%
addMarkers(lat,lng)
m
lng =  as.numeric(as.character(sample$long))
lat = as.numeric(as.character(sample$lat))
sample =  sample_n(ma, 100)
lat = as.numeric(as.character(sample$lat))
lat = aunfactor(sample$lat)
lat = unfactor(sample$lat)
library(varhandle)
install.packages(varhandle)
install.packages('varhandle')
library('varhandle')
lat = unfactor(sample$lat)
ma = ma[!apply(ma == "", 1, all),]
sample =  sample_n(ma, 100)
lat = unfactor(sample$lat)
sample$lat$levels
View(sample)
lat = sample$lat
lat$levels
lat$levels[[1]]
lat[[1]]
lat = unfactor(sample$lat)
lat = unfactor(sample$lat,digits=10)
levels(lat)
lat = sample$lat
levels(lat)
lat = levles(sample$lat)
lat = levels(sample$lat)
lng =  levels(sample$long)
m <- leaflet(ma) %>%
addTiles() %>%
addMarkers(lat,lng)
lng =  as.numeric(levels(sample$long))
lng =  as.double(levels(sample$long))
lng =  as.double(levels(sample$long))
lng =  (levels(as.double(sample$long)))
lng =  (levels(sample$long))
sample =  sample_n(ma, 100)
lat = levels(sample$lat)
sample =  sample_n(ma, 10)
lat = levels(sample$lat)
sample =  sample_n(ma, 100)
lat = (sample$lat)
sample =  sample_n(as.character(ma), 100)
sample =  sample_n(as.character(ma), 100)
lat = as.vector(unfactor(lat$lat))
lat = levels(sample$lat)
sample =  sample_n(lat 100)
ma$lat = lat
lat = levels(sample$lat)
lng =  levels(sample$long)
new = data.frame(lat,lng)
new = data.frame(lat[1:23727],lng)
View(new)
new = new[!apply(new == "", 1, all),]
m <- leaflet(new) %>%
addTiles() %>%
addMarkers(~lat,~lng)
as.numeric(paste(lat))
workpls = as.numeric(paste(lat))
workpls = as.numeric(paste(sample$lat))
be = as.numeric(paste(sample$long))
m <- leaflet(new) %>%
addTiles() %>%
addMarkers(may,be)
may = as.numeric(paste(sample$lat))
m <- leaflet(new) %>%
addTiles() %>%
addMarkers(may,be)
m
may[2]
fuckit = (may,be)
fuckit = data.frame(may,be)
View(fuckit)
m <- leaflet(fuckit) %>%
addTiles() %>%
addMarkers(~may,~be)
m
m
View(fuckit)
m <- leaflet(fuckit) %>%
addTiles() %>%
addMarkers(as.double(~may),as.double(~be))
sample =  sample_n(ma, 10)
may = as.numeric(paste(sample$lat))
be = as.numeric(paste(sample$long))
fuckit = data.frame(may,be)
m <- leaflet(fuckit) %>%
addTiles() %>%
addMarkers(~may,~be)
m
m <- leaflet(fuckit) %>%
addTiles() %>%
addMarkers(~may[1],~be[1])
m
m <- leaflet(data = fuckit) %>%
addTiles() %>%
addMarkers(~may[1],~be[1])
m
m <- leaflet(data = fuckit) %>%
addTiles() %>%
addMarkers(~may[1],~be[1])
m
lat = as.numeric(paste(sample$lat))
lng = as.numeric(paste(sample$long))
fuckit = data.frame(lat,lng)
m <- leaflet(data = fuckit) %>%
addTiles() %>%
addMarkers(~lat[1],~lng[1])
m
knitr::opts_chunk$set(echo = TRUE)
library('dplyr')
library('stringr')
require('knitr')
library('plotly')
shooting.data <- read.csv('data/shootings-2016.csv')
## counts total shootings
total.shootings <- count(select(shooting.data, killed) )
## counts total deaths
total.deaths <- sum(select(shooting.data, killed) )
most.affected.cities <- filter(shooting.data, killed > 5) %>% select(city,killed)
##different cities affected
number.of.affected.cities.washington <- length(filter(shooting.data, state == 'Washington'))
## gets todays date
today = as.Date(Sys.Date())
## makes a days.ago column to the data set
expanded.shooting.data <- mutate( shooting.data,  month.of.shooting = substring(as.Date(date, format = "%B %d, %Y"),6,7 ) ) %>%  mutate(  Days.ago = (today - as.Date(date, format = "%B %d, %Y"))  )
## breaks shootings down by month
months <-  summarise(group_by(expanded.shooting.data, month.of.shooting), total.deaths = sum(killed),total.injured = sum(injured), largest.shooting = max(killed), mean.deaths.per.shooting = mean(killed))
summary.shooting.data <- months
##install.packages('leaflet')
library('leaflet')
## new var to use when hover mouse over map shows sum of data
shooting.data$hover <- with(shooting.data, paste("City: ", city, ", Killed: ", killed,', Injured: ', injured, ", Date: ", date))
## creates interactive map
pal <- colorFactor(c("navy", "red","blue","green","yellow"), domain = c("ship", "pirate"))
qpal <- colorQuantile("RdYlBu", shooting.data$killed, n = 3)
m <- leaflet(data = shooting.data) %>%
addTiles() %>%
addCircleMarkers(~lng, ~lat, radius = ~killed * 2, fillOpacity = ~injured * -0.1 + .5 ,
label = ~hover)
today <- Sys.Date()
## makes grouped bar graph for each month
tm <- seq(0, 600, by = 10)
y <- months$total.deaths
y2<- months$total.injured
x <- seq(12)
p <- plot_ly(x = ~x, y = ~y, name = 'killed',type = "bar",width = '2')%>%
add_trace(y = ~y2, name = 'Injured')%>%
layout(yaxis = list(title = 'Count'), barmode = 'group')
m
View(shooting.data)
m <- leaflet(data = fuckit) %>%
addTiles() %>%
addCircleMarkers(~lng, ~lat, radius = ~killed * 2, fillOpacity = ~injured * -0.1 + .5 ,
label = ~hover)
m <- leaflet(data = fuckit) %>%
addTiles() %>%
addCircleMarkers(~lng, ~lat)
m
m <- leaflet(data = fuckit) %>%
addTiles() %>%
addCircleMarkers(~lng, ~latr)
m <- leaflet(data = fuckit) %>%
addTiles() %>%
addCircleMarkers(~lng, ~lat)
m <- leaflet(data = fuckit) %>%
addTiles() %>%
addCircleMarkers(~lng, ~lat)
m
sample =  sample_n(ma, 100)
sample =  sample_n(ma, 100)
lat = as.numeric(paste(sample$lat))
lng = as.numeric(paste(sample$long))
fuckit = data.frame(lat,lng)
m <- leaflet(data = fuckit) %>%
addTiles() %>%
addCircleMarkers(~lng, ~lat)
m
sample =  sample_n(ma, 100)
lat = as.numeric(paste(sample$lat))
lng = as.numeric(paste(sample$long))
samp = data.frame(lat,lng)
m <- leaflet(data = samp) %>%
addTiles() %>%
addCircleMarkers(~lng, ~lat)
m
