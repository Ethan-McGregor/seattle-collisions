most.affected.cities <- filter(shooting.data, killed > 5) %>% select(city,killed)
number.of.affected.cities.washington <- length(filter(shooting.data, state == 'Washington'))
today = as.Date(Sys.Date())
expanded.shooting.data <- mutate( shooting.data,  month.of.shooting = substring(as.Date(date, format = "%B %d, %Y"),6,7 ) ) %>%  mutate(  Days.ago = (today - as.Date(date, format = "%B %d, %Y"))  )
months <-  summarise(group_by(expanded.shooting.data, month.of.shooting), total.deaths = sum(killed),total.injured = sum(injured))
summary.shooting.data <- months
#install.packages('leaflet')
library('leaflet')
shooting.data$hover <- with(shooting.data, paste("City: ", city, ", Killed: ", killed,', Injured: ', injured, ", Date: ", date))
pal <- colorFactor(c("navy", "red","blue","green","yellow"), domain = c("ship", "pirate"))
qpal <- colorQuantile("RdYlBu", shooting.data$killed, n = 3)
m <- leaflet(data = shooting.data) %>%
addTiles() %>%
addCircleMarkers(~lng, ~lat, radius = ~killed * 2, fillOpacity = ~injured * -0.1 + .5 ,
label = ~hover)
today <- Sys.Date()
tm <- seq(0, 600, by = 10)
y <- months$total.deaths
y2<- months$total.injured
x <- seq(12)
p <- plot_ly(x = ~x, y = ~y, name = 'killed',type = "bar",width = '2')%>%
add_trace(y = ~y2, name = 'Injured')%>%
layout(yaxis = list(title = 'Count'), barmode = 'group')
kable(summary.shooting.data)
months <-  summarise(group_by(expanded.shooting.data, month.of.shooting), total.deaths = sum(killed),total.injured = sum(injured), state.with.most.deaths = state)
months <-  summarise(group_by(expanded.shooting.data, month.of.shooting), total.deaths = sum(killed),total.injured = sum(injured), state.with.most.deaths = state)
months <-  summarise(group_by(expanded.shooting.data, month.of.shooting), total.deaths = sum(killed),total.injured = sum(injured), states = max(killed))
months <-  summarise(group_by(expanded.shooting.data, month.of.shooting), total.deaths = sum(killed),total.injured = sum(injured), largest.shooting = max(state))
months <-  summarise(group_by(expanded.shooting.data, month.of.shooting), total.deaths = sum(killed),total.injured = sum(injured), largest.shooting = mean(state))
months <-  summarise(group_by(expanded.shooting.data, month.of.shooting), total.deaths = sum(killed),total.injured = sum(injured), largest.shooting = max(killed))
months <-  summarise(group_by(expanded.shooting.data, month.of.shooting), total.deaths = sum(killed),total.injured = sum(injured), largest.shooting = max(killed), mean.deaths = mean(killed))
filter(shooting.data, city == 'Orlando') %>% select(killed)`
filter(shooting.data, city == 'Orlando') %>% select(killed)
s
filter(shooting.data, city == 'Orlando') %>% select(killed)`
filter(shooting.data, city == 'Orlando') %>% select(killed)
v = filter(shooting.data, city == 'Orlando') %>% select(killed)
v = filter(shooting.data, city == 'Orlando')
v = filter(shooting.data, city == 'Orlando') %>% select(killed)
v = filter(shooting.data, city == 'Orlando')
v = filter(shooting.data, city = 'Orlando')
v = filter(shooting.data, city = 'Orlando')
v = filter(shooting.data, city = 'Orlando')
v = filter(shooting.data, city == 'Orlando')
v = filter(shooting.data, city == 'Orlando')  %>% select(killed)
View(v)
v = filter(shooting.data, city == 'Orlando')  %>% select(max(killed))
View(v)
v = filter(shooting.data, city == 'Orlando', state == 'Florida')  %>% select(max(killed))
View(v)
v = filter(shooting.data, city == 'Orlando', state == 'Florida')  %>% select(max(killed))
v = filter(shooting.data, city == 'Orlando', state == 'Florida')  %>% select(killed = mex(killed))
v = filter(shooting.data, city == 'Orlando', state == 'Florida')  %>% select(killed == mex(killed))
v = filter(shooting.data, city == 'Orlando', state == 'Florida')  %>% select(killed == max(killed))
v = filter(shooting.data, city == 'Orlando', state == 'Florida')  %>% select(killed = max(killed))
View(v)
v = filter(shooting.data, city == 'Orlando', state == 'Florida')  %>% select(killed = max(killed))
View(v)
v = filter(shooting.data, city == 'Orlando', state == 'Florida')  %>% select(killed == max(killed))
v = filter(shooting.data, city == 'Orlando', state == 'Florida',date == 'June 12, 2016')
v = filter(shooting.data, city == 'Orlando', state == 'Florida',date == 'June 12, 2016')  %>% select(killed)
filter(shooting.data, killed == 50, state == 'Florida')  %>% select(date)
number.of.affected.cities.washington[0,1]
number.of.affected.cities.washington[1,1]
number.of.affected.cities.washington[2,2]
most.affected.cities[2,2]
1,2
most.affected.cities[1,2]
View(most.affected.cities)
most.affected.cities['city'][1]
most.affected.cities['city'][0]
most.affected.cities[1]['city'][1]
most.affected.cities[1][1]
most.affected.cities[1,1]
library(shiny)
runApp('C:/Users/ermmc/OneDrive/Classes/201/m18-shiny/exercise-5')
install.packages(HSAUR)
install.packages(HSUAR)
install.packages("HSAUR")
#INFO 201 M18 Exercise 5 UI
#Require shiny
library(shiny)
data("womensrole", package = "HSAUR")
#Here you will define the functionality of your user interface
shinyUI(fluidPage(
# Add a descriptive application title
titlePanel("This app does cool things"),
# Here you will add the interactivity to your app
# Create a selectInput where the user can select either Men, Women, or Both.
# Create a selectInput where the user can select if they Agree or Disagree.
# Look at the Shiny documentation for selectInput and sliderInput syntax
# inputIDs's have been provided
sidebarLayout(
sidebarPanel(
#selectInput for Men, Women, or Both
#inputID = sex
#selectInput for Agree or Disagree
#inputID = thoughts
),
# Show a plot of the generated distribution
mainPanel(
#give your plot a descriptive name
plotOutput("plotNamehere")
)
)
))
library("HSAUR")
#INFO 201 M18 Exercise 5 UI
#Require shiny
library(shiny)
library("HSAUR")
data("womensrole", package = "HSAUR")
#Here you will define the functionality of your user interface
shinyUI(fluidPage(
# Add a descriptive application title
titlePanel("This app does cool things"),
# Here you will add the interactivity to your app
# Create a selectInput where the user can select either Men, Women, or Both.
# Create a selectInput where the user can select if they Agree or Disagree.
# Look at the Shiny documentation for selectInput and sliderInput syntax
# inputIDs's have been provided
sidebarLayout(
sidebarPanel(
#selectInput for Men, Women, or Both
#inputID = sex
#selectInput for Agree or Disagree
#inputID = thoughts
),
# Show a plot of the generated distribution
mainPanel(
#give your plot a descriptive name
plotOutput("plotNamehere")
)
)
))
data = data("womensrole", package = "HSAUR")
library(shiny)
library("HSAUR")
data = data("womensrole", package = "HSAUR")
#Here you will define the functionality of your user interface
shinyUI(
#INFO 201 M18 Exercise 5 UI
#Require shiny
library(shiny)
data = data("womensrole", package = "HSAUR")
#Here you will define the functionality of your user interface
shinyUI(fluidPage(
# Add a descriptive application title
titlePanel("This app does cool things"),
# Here you will add the interactivity to your app
# Create a selectInput where the user can select either Men, Women, or Both.
# Create a selectInput where the user can select if they Agree or Disagree.
# Look at the Shiny documentation for selectInput and sliderInput syntax
# inputIDs's have been provided
sidebarLayout(
sidebarPanel(
#selectInput for Men, Women, or Both
#inputID = sex
#selectInput for Agree or Disagree
#inputID = thoughts
),
# Show a plot of the generated distribution
mainPanel(
#give your plot a descriptive name
plotOutput("plotNamehere")
)
)
))
library(shiny)
data = data("womensrole", package = "HSAUR")
data("womensrole", package = "HSAUR")
data("womensrole", package = "HSAUR")
knitr::opts_chunk$set(echo = TRUE)
collison <- read.csv('data/SDOT_Collisions.csv')
library('leaflet')
library('stringr')
library('dplyr')
## creates interactive map
pal <- colorFactor(c("navy", "red","blue","green","yellow"), domain = c("ship", "pirate"))
#qpal <- colorQuantile("RdYlBu", shooting.data$killed, n = 3)
d = data.frame(str_split(as.character(collison$Shape), " ") )
long = data.frame(unlist(d[2,]))
lat = data.frame(unlist(d[1,]))
names(lat) = "lat"
names(long) = "long"
lat = as.vector(lat$lat)
long = as.vector(long$long)
lat = str_replace(lat, "\\(",  "")
lat = str_replace(lat, "\\)",  "")
lat = str_replace(lat, "\\,",  "")
long = str_replace(long, "\\,",  "")
long = str_replace(long, "\\(",  "")
long = str_replace(long, "\\)",  "")
ma = data.frame(lat,long)
ma = ma[!apply(ma == "", 1, all),]
sample =  sample_n(ma, 100)
lat = as.numeric(paste(sample$lat))
lng = as.numeric(paste(sample$long))
samp = data.frame(lat,lng)
m <- leaflet(data = samp) %>%
addTiles() %>%
addCircleMarkers(~lng, ~lat)
m
sample =  sample_n(ma, 100)
lat = as.numeric(paste(sample$lat))
lng = as.numeric(paste(sample$long))
samp = data.frame(lat,lng)
m <- leaflet(data = samp) %>%
addTiles() %>%
addCircleMarkers(~lng, ~lat)
m
sample =  sample_n(ma, 100)
lat = as.numeric(paste(sample$lat))
lng = as.numeric(paste(sample$long))
samp = data.frame(lat,lng)
m <- leaflet(data = samp) %>%
addTiles() %>%
addCircleMarkers(~lng, ~lat)
m
sample =  sample_n(ma, 100)
lat = as.numeric(paste(sample$lat))
lng = as.numeric(paste(sample$long))
samp = data.frame(lat,lng)
m <- leaflet(data = samp) %>%
addTiles() %>%
addCircleMarkers(~lng, ~lat)
m
View(ma)
View(d)
View(collison)
d = d[!apply(d == "", 1, all),]
View(d)
noNa = collison[!apply(collison == "", 1, all),]
noNa = collison$Shape[!apply(collison == "", 1, all),]
noNa = collison$Shape[!apply(collison$Shape == "", 1, all),]
noNa = collison[complete.cases(collison),]
View(noNa)
d = data.frame(str_split(as.character(noNa$Shape), " ") )
long = data.frame(unlist(d[2,]))
lat = data.frame(unlist(d[1,]))
names(lat) = "lat"
names(long) = "long"
lat = as.vector(lat$lat)
long = as.vector(long$long)
lat = str_replace(lat, "\\(",  "")
lat = str_replace(lat, "\\)",  "")
lat = str_replace(lat, "\\,",  "")
long = str_replace(long, "\\,",  "")
long = str_replace(long, "\\(",  "")
long = str_replace(long, "\\)",  "")
ma = data.frame(lat,long)
sample =  sample_n(ma, 1000)
sample =  sample_n(ma, 1000)
lat = as.numeric(paste(sample$lat))
lng = as.numeric(paste(sample$long))
samp = data.frame(lat,lng)
m <- leaflet(data = samp) %>%
addTiles() %>%
addCircleMarkers(~lng, ~lat)
m
noNa$lat = as.numeric(paste(ma$lat))
noNa$lng = as.numeric(paste(ma$lng))
noNa$lng = as.numeric(paste(ma$long))
library('leaflet')
library('stringr')
library('dplyr')
## creates interactive map
pal <- colorFactor(c("navy", "red","blue","green","yellow"), domain = c("ship", "pirate"))
#qpal <- colorQuantile("RdYlBu", shooting.data$killed, n = 3)
# remove rows with missing data
noNa = collison[complete.cases(collison),]
d = data.frame(str_split(as.character(noNa$Shape), " ") )
long = data.frame(unlist(d[2,]))
lat = data.frame(unlist(d[1,]))
names(lat) = "lat"
names(long) = "long"
lat = as.vector(lat$lat)
long = as.vector(long$long)
lat = str_replace(lat, "\\(",  "")
lat = str_replace(lat, "\\)",  "")
lat = str_replace(lat, "\\,",  "")
long = str_replace(long, "\\,",  "")
long = str_replace(long, "\\(",  "")
long = str_replace(long, "\\)",  "")
ma = data.frame(lat,long)
noNa$lat = as.numeric(paste(ma$lat))
noNa$lng = as.numeric(paste(ma$long))
sample =  sample_n(noNa, 1000)
m <- leaflet(data = sample) %>%
addTiles() %>%
addCircleMarkers(~lng, ~lat)
m
sample =  sample_n(noNa, 500)
m <- leaflet(data = sample) %>%
addTiles() %>%
addCircleMarkers(~lng, ~lat)
m
shiny::runApp('C:/Users/ermmc/Desktop/seattle-collisions')
plotlyOutput("heat")
leafletOutput("heat")
library('leaflet')
library('stringr')
library('dplyr')
sliderInput("integer", "Number of Variables", min=2, max=10, value=500)
renderPlot({
leaflet(data = input$integer) %>%
addTiles() %>%
addCircleMarkers(~lng, ~lat)
})
knitr::opts_chunk$set(echo = TRUE)
library('leaflet')
library('stringr')
library('dplyr')
sliderInput("integer", "Number of Variables", min=2, max=10, value=500)
renderPlot({
leaflet(data = input$integer) %>%
addTiles() %>%
addCircleMarkers(~lng, ~lat)
})
library('leaflet')
library('stringr')
library('dplyr')
sliderInput("integer", "Number of Variables", min=2, max=10, value=500)
renderLeaflet({
leaflet(data = input$integer) %>%
addTiles() %>%
addCircleMarkers(~lng, ~lat)
})
library('leaflet')
library('stringr')
library('dplyr')
sliderInput("integer", "Number of Variables", min=2, max=10, value=500)
renderLeaflet({
leaflet(data = input$integer) %>%
addTiles() %>%
addCircleMarkers(~lng, ~lat)
})
library('leaflet')
library('stringr')
library('dplyr')
sliderInput("integer", "Number of Variables", min=2, max=10, value=500)
renderLeaflet({
leaflet(data = input$integer) %>%
addTiles() %>%
addCircleMarkers(~lng, ~lat)
})
runApp('C:/Users/ermmc/Desktop/seattle-collisions')
knitr::opts_chunk$set(echo = TRUE)
collison <- read.csv('data/SDOT_Collisions.csv')
library('leaflet')
library('stringr')
library('dplyr')
## creates interactive map
pal <- colorFactor(c("navy", "red","blue","green","yellow"), domain = c("ship", "pirate"))
#qpal <- colorQuantile("RdYlBu", shooting.data$killed, n = 3)
# remove rows with missing data
noNa = collison[complete.cases(collison),]
d = data.frame(str_split(as.character(noNa$Shape), " ") )
long = data.frame(unlist(d[2,]))
lat = data.frame(unlist(d[1,]))
names(lat) = "lat"
names(long) = "long"
lat = as.vector(lat$lat)
long = as.vector(long$long)
lat = str_replace(lat, "\\(",  "")
lat = str_replace(lat, "\\)",  "")
lat = str_replace(lat, "\\,",  "")
long = str_replace(long, "\\,",  "")
long = str_replace(long, "\\(",  "")
long = str_replace(long, "\\)",  "")
ma = data.frame(lat,long)
noNa$lat = as.numeric(paste(ma$lat))
noNa$lng = as.numeric(paste(ma$long))
sample =  sample_n(noNa, 500)
m <- leaflet(data = sample) %>%
addTiles() %>%
addCircleMarkers(~lng, ~lat)
m
knitr::opts_chunk$set(echo = TRUE)
collison <- read.csv('data/SDOT_Collisions.csv')
library('leaflet')
library('stringr')
library('dplyr')
## creates interactive map
pal <- colorFactor(c("navy", "red","blue","green","yellow"), domain = c("ship", "pirate"))
#qpal <- colorQuantile("RdYlBu", shooting.data$killed, n = 3)
# remove rows with missing data
noNa = collison[complete.cases(collison),]
d = data.frame(str_split(as.character(noNa$Shape), " ") )
long = data.frame(unlist(d[2,]))
lat = data.frame(unlist(d[1,]))
knitr::opts_chunk$set(echo = TRUE)
collison <- read.csv('data/SDOT_Collisions.csv')
library('leaflet')
library('stringr')
library('dplyr')
## creates interactive map
pal <- colorFactor(c("navy", "red","blue","green","yellow"), domain = c("ship", "pirate"))
#qpal <- colorQuantile("RdYlBu", shooting.data$killed, n = 3)
# remove rows with missing data
noNa = collison[complete.cases(collison),]
d = data.frame(str_split(as.character(noNa$Shape), " ") )
long = data.frame(unlist(d[2,]))
lat = data.frame(unlist(d[1,]))
names(lat) = "lat"
names(long) = "long"
lat = as.vector(lat$lat)
long = as.vector(long$long)
lat = str_replace(lat, "\\(",  "")
lat = str_replace(lat, "\\)",  "")
lat = str_replace(lat, "\\,",  "")
long = str_replace(long, "\\,",  "")
long = str_replace(long, "\\(",  "")
long = str_replace(long, "\\)",  "")
ma = data.frame(lat,long)
noNa$lat = as.numeric(paste(ma$lat))
noNa$lng = as.numeric(paste(ma$long))
sample =  sample_n(noNa, 500)
m <- leaflet(data = sample) %>%
addTiles() %>%
addCircleMarkers(~lng, ~lat)
m
View(collison)
View(sample)
m <- leaflet(data = sample) %>%
addTiles() %>%
addCircleMarkers(~lng, ~lat, radius = ~FATALTIES * 2)
m <- leaflet(data = sample) %>%
addTiles() %>%
addCircleMarkers(~lng, ~lat, radius = ~FATALITIES * 2)
m
m <- leaflet(data = sample) %>%
addTiles() %>%
addCircleMarkers(~lng, ~lat, radius = ~FATALITIES +1 * 2)
m
m <- leaflet(data = sample) %>%
addTiles() %>%
addCircleMarkers(~lng, ~lat, radius = ~INJURIES +1 * 2)
m
m <- leaflet(data = sample) %>%
addTiles() %>%
addCircleMarkers(~lng, ~lat, radius = ~INJURIES + 5 * 2)
m
m <- leaflet(data = sample) %>%
addTiles() %>%
addCircleMarkers(~lng, ~lat, radius = ~INJURIES + 2 * 2)
m
shiny::runApp('C:/Users/ermmc/Desktop/seattle-collisions')
library('leaflet')
shinyUI(fluidPage(
titlePanel("Exploring Cereal"),
sidebarLayout( position = "right",
sidebarPanel(
# slider to change number of variables
sliderInput("integer", "Number of Variables", min=2, max=10, value=500)
),
mainPanel(
leafletoutput("heat")
)
)
))
shinyUI(fluidPage(
titlePanel("Exploring Cereal"),
sidebarLayout( position = "right",
sidebarPanel(
# slider to change number of variables
sliderInput("integer", "Number of Variables", min=2, max=10, value=500)
),
mainPanel(
leafletOutput("heat")
)
)
))
runApp('C:/Users/ermmc/Desktop/seattle-collisions')
runApp('C:/Users/ermmc/Desktop/seattle-collisions')
runApp('C:/Users/ermmc/Desktop/seattle-collisions')
render()
render <- function(){
output$heat <- renderLeaflet({
leaflet(data = sliderValues()) %>%
addTiles() %>%
addCircleMarkers(~lng, ~lat)   })
}
render()
render()
runApp('C:/Users/ermmc/Desktop/seattle-collisions')
runApp('C:/Users/ermmc/Desktop/seattle-collisions')
runApp('C:/Users/ermmc/Desktop/seattle-collisions')
runApp('C:/Users/ermmc/Desktop/seattle-collisions')
runApp('C:/Users/ermmc/Desktop/seattle-collisions')
noNa <- getData()
noNa <- getData()
source('scripts/map.R')
source('script/map.R')
s
source('scripts/map.R')
source('scripts/map.R')
noNa <- getData()
source('../scripts/map.R')
setwd("C:/Users/ermmc/Desktop/seattle-collisions")
source('scripts/map.R')
noNa <- getData()
runApp()
runApp()
runApp()
runApp()
View(noNa)
runApp()
View(noNa)
runApp()
runApp()
runApp()
