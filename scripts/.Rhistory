),
# Show a plot of the generated distribution
mainPanel(
#give your plot a descriptive name
plotOutput("plotNamehere")
)
)
))
library(shiny)
data = data("womensrole", package = "HSAUR")
data("womensrole", package = "HSAUR")
data("womensrole", package = "HSAUR")
knitr::opts_chunk$set(echo = TRUE)
collison <- read.csv('data/SDOT_Collisions.csv')
library('leaflet')
library('stringr')
library('dplyr')
## creates interactive map
pal <- colorFactor(c("navy", "red","blue","green","yellow"), domain = c("ship", "pirate"))
#qpal <- colorQuantile("RdYlBu", shooting.data$killed, n = 3)
d = data.frame(str_split(as.character(collison$Shape), " ") )
long = data.frame(unlist(d[2,]))
lat = data.frame(unlist(d[1,]))
names(lat) = "lat"
names(long) = "long"
lat = as.vector(lat$lat)
long = as.vector(long$long)
lat = str_replace(lat, "\\(",  "")
lat = str_replace(lat, "\\)",  "")
lat = str_replace(lat, "\\,",  "")
long = str_replace(long, "\\,",  "")
long = str_replace(long, "\\(",  "")
long = str_replace(long, "\\)",  "")
ma = data.frame(lat,long)
ma = ma[!apply(ma == "", 1, all),]
sample =  sample_n(ma, 100)
lat = as.numeric(paste(sample$lat))
lng = as.numeric(paste(sample$long))
samp = data.frame(lat,lng)
m <- leaflet(data = samp) %>%
addTiles() %>%
addCircleMarkers(~lng, ~lat)
m
sample =  sample_n(ma, 100)
lat = as.numeric(paste(sample$lat))
lng = as.numeric(paste(sample$long))
samp = data.frame(lat,lng)
m <- leaflet(data = samp) %>%
addTiles() %>%
addCircleMarkers(~lng, ~lat)
m
sample =  sample_n(ma, 100)
lat = as.numeric(paste(sample$lat))
lng = as.numeric(paste(sample$long))
samp = data.frame(lat,lng)
m <- leaflet(data = samp) %>%
addTiles() %>%
addCircleMarkers(~lng, ~lat)
m
sample =  sample_n(ma, 100)
lat = as.numeric(paste(sample$lat))
lng = as.numeric(paste(sample$long))
samp = data.frame(lat,lng)
m <- leaflet(data = samp) %>%
addTiles() %>%
addCircleMarkers(~lng, ~lat)
m
View(ma)
View(d)
View(collison)
d = d[!apply(d == "", 1, all),]
View(d)
noNa = collison[!apply(collison == "", 1, all),]
noNa = collison$Shape[!apply(collison == "", 1, all),]
noNa = collison$Shape[!apply(collison$Shape == "", 1, all),]
noNa = collison[complete.cases(collison),]
View(noNa)
d = data.frame(str_split(as.character(noNa$Shape), " ") )
long = data.frame(unlist(d[2,]))
lat = data.frame(unlist(d[1,]))
names(lat) = "lat"
names(long) = "long"
lat = as.vector(lat$lat)
long = as.vector(long$long)
lat = str_replace(lat, "\\(",  "")
lat = str_replace(lat, "\\)",  "")
lat = str_replace(lat, "\\,",  "")
long = str_replace(long, "\\,",  "")
long = str_replace(long, "\\(",  "")
long = str_replace(long, "\\)",  "")
ma = data.frame(lat,long)
sample =  sample_n(ma, 1000)
sample =  sample_n(ma, 1000)
lat = as.numeric(paste(sample$lat))
lng = as.numeric(paste(sample$long))
samp = data.frame(lat,lng)
m <- leaflet(data = samp) %>%
addTiles() %>%
addCircleMarkers(~lng, ~lat)
m
noNa$lat = as.numeric(paste(ma$lat))
noNa$lng = as.numeric(paste(ma$lng))
noNa$lng = as.numeric(paste(ma$long))
library('leaflet')
library('stringr')
library('dplyr')
## creates interactive map
pal <- colorFactor(c("navy", "red","blue","green","yellow"), domain = c("ship", "pirate"))
#qpal <- colorQuantile("RdYlBu", shooting.data$killed, n = 3)
# remove rows with missing data
noNa = collison[complete.cases(collison),]
d = data.frame(str_split(as.character(noNa$Shape), " ") )
long = data.frame(unlist(d[2,]))
lat = data.frame(unlist(d[1,]))
names(lat) = "lat"
names(long) = "long"
lat = as.vector(lat$lat)
long = as.vector(long$long)
lat = str_replace(lat, "\\(",  "")
lat = str_replace(lat, "\\)",  "")
lat = str_replace(lat, "\\,",  "")
long = str_replace(long, "\\,",  "")
long = str_replace(long, "\\(",  "")
long = str_replace(long, "\\)",  "")
ma = data.frame(lat,long)
noNa$lat = as.numeric(paste(ma$lat))
noNa$lng = as.numeric(paste(ma$long))
sample =  sample_n(noNa, 1000)
m <- leaflet(data = sample) %>%
addTiles() %>%
addCircleMarkers(~lng, ~lat)
m
sample =  sample_n(noNa, 500)
m <- leaflet(data = sample) %>%
addTiles() %>%
addCircleMarkers(~lng, ~lat)
m
shiny::runApp('C:/Users/ermmc/Desktop/seattle-collisions')
plotlyOutput("heat")
leafletOutput("heat")
library('leaflet')
library('stringr')
library('dplyr')
sliderInput("integer", "Number of Variables", min=2, max=10, value=500)
renderPlot({
leaflet(data = input$integer) %>%
addTiles() %>%
addCircleMarkers(~lng, ~lat)
})
knitr::opts_chunk$set(echo = TRUE)
library('leaflet')
library('stringr')
library('dplyr')
sliderInput("integer", "Number of Variables", min=2, max=10, value=500)
renderPlot({
leaflet(data = input$integer) %>%
addTiles() %>%
addCircleMarkers(~lng, ~lat)
})
library('leaflet')
library('stringr')
library('dplyr')
sliderInput("integer", "Number of Variables", min=2, max=10, value=500)
renderLeaflet({
leaflet(data = input$integer) %>%
addTiles() %>%
addCircleMarkers(~lng, ~lat)
})
library('leaflet')
library('stringr')
library('dplyr')
sliderInput("integer", "Number of Variables", min=2, max=10, value=500)
renderLeaflet({
leaflet(data = input$integer) %>%
addTiles() %>%
addCircleMarkers(~lng, ~lat)
})
library('leaflet')
library('stringr')
library('dplyr')
sliderInput("integer", "Number of Variables", min=2, max=10, value=500)
renderLeaflet({
leaflet(data = input$integer) %>%
addTiles() %>%
addCircleMarkers(~lng, ~lat)
})
runApp('C:/Users/ermmc/Desktop/seattle-collisions')
knitr::opts_chunk$set(echo = TRUE)
collison <- read.csv('data/SDOT_Collisions.csv')
library('leaflet')
library('stringr')
library('dplyr')
## creates interactive map
pal <- colorFactor(c("navy", "red","blue","green","yellow"), domain = c("ship", "pirate"))
#qpal <- colorQuantile("RdYlBu", shooting.data$killed, n = 3)
# remove rows with missing data
noNa = collison[complete.cases(collison),]
d = data.frame(str_split(as.character(noNa$Shape), " ") )
long = data.frame(unlist(d[2,]))
lat = data.frame(unlist(d[1,]))
names(lat) = "lat"
names(long) = "long"
lat = as.vector(lat$lat)
long = as.vector(long$long)
lat = str_replace(lat, "\\(",  "")
lat = str_replace(lat, "\\)",  "")
lat = str_replace(lat, "\\,",  "")
long = str_replace(long, "\\,",  "")
long = str_replace(long, "\\(",  "")
long = str_replace(long, "\\)",  "")
ma = data.frame(lat,long)
noNa$lat = as.numeric(paste(ma$lat))
noNa$lng = as.numeric(paste(ma$long))
sample =  sample_n(noNa, 500)
m <- leaflet(data = sample) %>%
addTiles() %>%
addCircleMarkers(~lng, ~lat)
m
knitr::opts_chunk$set(echo = TRUE)
collison <- read.csv('data/SDOT_Collisions.csv')
library('leaflet')
library('stringr')
library('dplyr')
## creates interactive map
pal <- colorFactor(c("navy", "red","blue","green","yellow"), domain = c("ship", "pirate"))
#qpal <- colorQuantile("RdYlBu", shooting.data$killed, n = 3)
# remove rows with missing data
noNa = collison[complete.cases(collison),]
d = data.frame(str_split(as.character(noNa$Shape), " ") )
long = data.frame(unlist(d[2,]))
lat = data.frame(unlist(d[1,]))
knitr::opts_chunk$set(echo = TRUE)
collison <- read.csv('data/SDOT_Collisions.csv')
library('leaflet')
library('stringr')
library('dplyr')
## creates interactive map
pal <- colorFactor(c("navy", "red","blue","green","yellow"), domain = c("ship", "pirate"))
#qpal <- colorQuantile("RdYlBu", shooting.data$killed, n = 3)
# remove rows with missing data
noNa = collison[complete.cases(collison),]
d = data.frame(str_split(as.character(noNa$Shape), " ") )
long = data.frame(unlist(d[2,]))
lat = data.frame(unlist(d[1,]))
names(lat) = "lat"
names(long) = "long"
lat = as.vector(lat$lat)
long = as.vector(long$long)
lat = str_replace(lat, "\\(",  "")
lat = str_replace(lat, "\\)",  "")
lat = str_replace(lat, "\\,",  "")
long = str_replace(long, "\\,",  "")
long = str_replace(long, "\\(",  "")
long = str_replace(long, "\\)",  "")
ma = data.frame(lat,long)
noNa$lat = as.numeric(paste(ma$lat))
noNa$lng = as.numeric(paste(ma$long))
sample =  sample_n(noNa, 500)
m <- leaflet(data = sample) %>%
addTiles() %>%
addCircleMarkers(~lng, ~lat)
m
View(collison)
View(sample)
m <- leaflet(data = sample) %>%
addTiles() %>%
addCircleMarkers(~lng, ~lat, radius = ~FATALTIES * 2)
m <- leaflet(data = sample) %>%
addTiles() %>%
addCircleMarkers(~lng, ~lat, radius = ~FATALITIES * 2)
m
m <- leaflet(data = sample) %>%
addTiles() %>%
addCircleMarkers(~lng, ~lat, radius = ~FATALITIES +1 * 2)
m
m <- leaflet(data = sample) %>%
addTiles() %>%
addCircleMarkers(~lng, ~lat, radius = ~INJURIES +1 * 2)
m
m <- leaflet(data = sample) %>%
addTiles() %>%
addCircleMarkers(~lng, ~lat, radius = ~INJURIES + 5 * 2)
m
m <- leaflet(data = sample) %>%
addTiles() %>%
addCircleMarkers(~lng, ~lat, radius = ~INJURIES + 2 * 2)
m
View(sample)
shiny::runApp('C:/Users/ermmc/Desktop/seattle-collisions')
runApp('C:/Users/ermmc/Desktop/seattle-collisions')
runApp('C:/Users/ermmc/Desktop/seattle-collisions')
runApp('C:/Users/ermmc/Desktop/seattle-collisions')
runApp('C:/Users/ermmc/Desktop/seattle-collisions')
runApp('C:/Users/ermmc/Desktop/seattle-collisions')
runApp('C:/Users/ermmc/Desktop/seattle-collisions')
runApp('C:/Users/ermmc/Desktop/seattle-collisions')
View(sample)
shiny::runApp('C:/Users/ermmc/Desktop/seattle-collisions')
print(rmse)
library("rpart")
library('plotly')
library('shiny')
library('leaflet')
library('stringr')
library('dplyr')
library('randomForest')
col <- read.csv('../data/SDOT_Collisions.csv',stringsAsFactors=FALSE )
data = data.frame(col$INJURIES,col$DISTANCE,col$VEHCOUNT,col$PERSONCOUNT, col$ST_COLCODE, col$WEATHER,stringsAsFactors=FALSE )
data$col.INJURIES <- replace(data$col.INJURIES , data$col.INJURIES != "0", 1)
data$col.INJURIES <- replace(data$col.INJURIES , data$col.INJURIES != "1", 0)
data$col.WEATHER <- replace(data$col.WEATHER ,data$col.WEATHER == "Raining", 0)
data$col.WEATHER <- replace(data$col.WEATHER ,data$col.WEATHER == "Overcast", 1)
data$col.WEATHER <- replace(data$col.WEATHER ,data$col.WEATHER == "Clear or Partly Cloudy", 2)
data$col.WEATHER <- replace(data$col.WEATHER ,data$col.WEATHER == "Unknown", 3)
data$col.WEATHER <- replace(data$col.WEATHER ,data$col.WEATHER == "Other", 4)
data$col.WEATHER <- replace(data$col.WEATHER ,data$col.WEATHER == "Snowing", 5)
data$col.WEATHER <- replace(data$col.WEATHER ,data$col.WEATHER == "Fog/Smog/Smoke", 6)
data$col.WEATHER <- replace(data$col.WEATHER ,data$col.WEATHER == "Sleet/Hail/Freezing Rain", 7)
data$col.WEATHER <- replace(data$col.WEATHER ,data$col.WEATHER == "Severe Crosswind", 8)
data$col.WEATHER <- replace(data$col.WEATHER ,data$col.WEATHER == "Blowing Sand or Dirt or Snow", 9)
data$col.WEATHER <- replace(data$col.WEATHER ,data$col.WEATHER == "", 3)
data$col.WEATHER <- replace(data$col.WEATHER , is.na(data$col.WEATHER) , 0)
data$col.INJURIES <- replace(data$col.INJURIES ,is.na(data$col.INJURIES), 0)
data$col.DISTANCE <- replace(data$col.DISTANCE ,is.na(data$col.DISTANCE), 0)
data$col.VEHCOUNT <- replace(data$col.VEHCOUNT , is.na(data$col.VEHCOUNT), 0)
data$col.PERSONCOUNT <- replace(data$col.PERSONCOUNT , is.na(data$col.PERSONCOUNT) , 0)
data$col.ST_COLCODE <- replace(data$col.ST_COLCODE ,is.na(data$col.ST_COLCODE ), 0)
data$col.WEATHER <- factor(data$col.WEATHER)
data$col.INJURIES <- factor(data$col.INJURIES)
data$col.DISTANCE <- factor(data$col.DISTANCE)
data$col.VEHCOUNT <- factor(data$col.VEHCOUNT)
data$col.PERSONCOUNT <- factor(data$col.PERSONCOUNT)
data$col.ST_COLCODE <- factor(data$col.ST_COLCODE)
data = na.roughfix(data)
#sample <- sample_n(data, 500)
data$col.WEATHER <- as.numeric(data$col.WEATHER)
data$col.INJURIES <- as.numeric(data$col.INJURIES)
data$col.DISTANCE <- as.numeric(data$col.DISTANCE)
data$col.VEHCOUNT <- as.numeric(data$col.VEHCOUNT)
data$col.PERSONCOUNT <- as.numeric(data$col.PERSONCOUNT)
data$col.ST_COLCODE <- as.numeric(data$col.ST_COLCODE)
dt = sort(sample(nrow(data), nrow(data)*.7))
trainindex <- sample(data, trunc(length(data)/2))
train<-data[dt,]
test<-data[-dt,]
class <- randomForest(col.INJURIES ~ col.DISTANCE + col.VEHCOUNT + col.PERSONCOUNT + col.ST_COLCODE + col.WEATHER,
data = train, importance = TRUE,  ntree = 100)
pre <- predict(class,test)
actual <- test$col.INJURIES
preAct <- data.frame(pre,actual)
rsq <- 1-sum((actual-pre)^2)/sum((actual-mean(actual))^2)
rmse <- rsq <- sqrt( mean( (actual-pre)^2 , na.rm = TRUE ) )
print(rsq)
print(rmse)
setwd("C:/Users/ermmc/Desktop/seattle-collisions/scripts")
library("rpart")
library('plotly')
library('shiny')
library('leaflet')
library('stringr')
library('dplyr')
library('randomForest')
col <- read.csv('../data/SDOT_Collisions.csv',stringsAsFactors=FALSE )
data = data.frame(col$INJURIES,col$DISTANCE,col$VEHCOUNT,col$PERSONCOUNT, col$ST_COLCODE, col$WEATHER,stringsAsFactors=FALSE )
data$col.INJURIES <- replace(data$col.INJURIES , data$col.INJURIES != "0", 1)
data$col.INJURIES <- replace(data$col.INJURIES , data$col.INJURIES != "1", 0)
data$col.WEATHER <- replace(data$col.WEATHER ,data$col.WEATHER == "Raining", 0)
data$col.WEATHER <- replace(data$col.WEATHER ,data$col.WEATHER == "Overcast", 1)
data$col.WEATHER <- replace(data$col.WEATHER ,data$col.WEATHER == "Clear or Partly Cloudy", 2)
data$col.WEATHER <- replace(data$col.WEATHER ,data$col.WEATHER == "Unknown", 3)
data$col.WEATHER <- replace(data$col.WEATHER ,data$col.WEATHER == "Other", 4)
data$col.WEATHER <- replace(data$col.WEATHER ,data$col.WEATHER == "Snowing", 5)
data$col.WEATHER <- replace(data$col.WEATHER ,data$col.WEATHER == "Fog/Smog/Smoke", 6)
data$col.WEATHER <- replace(data$col.WEATHER ,data$col.WEATHER == "Sleet/Hail/Freezing Rain", 7)
data$col.WEATHER <- replace(data$col.WEATHER ,data$col.WEATHER == "Severe Crosswind", 8)
data$col.WEATHER <- replace(data$col.WEATHER ,data$col.WEATHER == "Blowing Sand or Dirt or Snow", 9)
data$col.WEATHER <- replace(data$col.WEATHER ,data$col.WEATHER == "", 3)
data$col.WEATHER <- replace(data$col.WEATHER , is.na(data$col.WEATHER) , 0)
data$col.INJURIES <- replace(data$col.INJURIES ,is.na(data$col.INJURIES), 0)
data$col.DISTANCE <- replace(data$col.DISTANCE ,is.na(data$col.DISTANCE), 0)
data$col.VEHCOUNT <- replace(data$col.VEHCOUNT , is.na(data$col.VEHCOUNT), 0)
data$col.PERSONCOUNT <- replace(data$col.PERSONCOUNT , is.na(data$col.PERSONCOUNT) , 0)
data$col.ST_COLCODE <- replace(data$col.ST_COLCODE ,is.na(data$col.ST_COLCODE ), 0)
data$col.WEATHER <- factor(data$col.WEATHER)
data$col.INJURIES <- factor(data$col.INJURIES)
data$col.DISTANCE <- factor(data$col.DISTANCE)
data$col.VEHCOUNT <- factor(data$col.VEHCOUNT)
data$col.PERSONCOUNT <- factor(data$col.PERSONCOUNT)
data$col.ST_COLCODE <- factor(data$col.ST_COLCODE)
data = na.roughfix(data)
#sample <- sample_n(data, 500)
data$col.WEATHER <- as.numeric(data$col.WEATHER)
data$col.INJURIES <- as.numeric(data$col.INJURIES)
data$col.DISTANCE <- as.numeric(data$col.DISTANCE)
data$col.VEHCOUNT <- as.numeric(data$col.VEHCOUNT)
data$col.PERSONCOUNT <- as.numeric(data$col.PERSONCOUNT)
data$col.ST_COLCODE <- as.numeric(data$col.ST_COLCODE)
dt = sort(sample(nrow(data), nrow(data)*.7))
trainindex <- sample(data, trunc(length(data)/2))
train<-data[dt,]
test<-data[-dt,]
class <- randomForest(col.INJURIES ~ col.DISTANCE + col.VEHCOUNT + col.PERSONCOUNT + col.ST_COLCODE + col.WEATHER,
data = train, importance = TRUE,  ntree = 100)
pre <- predict(class,test)
actual <- test$col.INJURIES
preAct <- data.frame(pre,actual)
rsq <- 1-sum((actual-pre)^2)/sum((actual-mean(actual))^2)
rmse <- rsq <- sqrt( mean( (actual-pre)^2 , na.rm = TRUE ) )
print(rsq)
print(rmse)
View(sample)
rm(list = ls())
library('plotly')
library('stringr')
library('dplyr')
library('tidyr')
YearGraph <- function(){
collisions <- read.csv('./data/SDOT_Collisions.csv', stringsAsFactors = F)
# remove rows with missing data
collisions <- collisions[complete.cases(collisions),]
#get year from datetime
collisions <- mutate(collisions, year = substr(collisions$INCDATE, 7, 10))
collisions <- group_by(collisions, year, SEVERITYDESC)
count <- summarise(collisions, count = n())
#get data for just 2004 - 2016
count <- count[4:68,]
#go wide for stacked bar chart
count.wide <- spread(count, SEVERITYDESC, count)
#format column names
tidy.name.vector <- make.names(colnames(count.wide), unique=TRUE)
colnames(count.wide) <- tidy.name.vector
#stacked bar chart of year + severity
chart <- plot_ly (count.wide,
x = ~year,
y = ~Unknown,
type = "bar",
name = "Unknown",
hoverinfo = "text",
text = ~paste(Unknown, "Unknown"),
marker = list(color = "#ffb2b2")) %>%
add_trace(y = ~Property.Damage.Only.Collision,
name = "Property Damage Only Collisions",
hoverinfo = "text",
text = ~paste(Property.Damage.Only.Collision, "Property Damage Only Collisions"),
marker = list(color = "#ff4c4c")) %>%
add_trace(y = ~Injury.Collision,
name = "Injury Collisions",
hoverinfo = "text",
text = ~paste(Injury.Collision, "Injury Collisions"),
marker = list(color = "#cc0000")) %>%
add_trace(y = ~Serious.Injury.Collision,
name = "Serious Injury Collisions",
hoverinfo = "text",
text = ~paste(Serious.Injury.Collision, "Serious Injury Collisions"),
marker = list(color = "#7f0000")) %>%
add_trace(y = ~Fatality.Collision,
name = "Fatality Collisions",
hoverinfo = "text",
text = ~paste(Fatality.Collision, "Fatality Collisions"),
marker = list(color = "#000000")) %>%
layout(title = "Seattle Collisions 2004 - 2016",
xaxis = list(title = "Year"),
yaxis = list(title = "# of Collisions"),
barmode = "stack")
return(chart)
}
chart)
chart
chart <- plot_ly (count.wide,
x = ~year,
y = ~Unknown,
type = "bar",
name = "Unknown",
hoverinfo = "text",
text = ~paste(Unknown, "Unknown"),
marker = list(color = "#ffb2b2")) %>%
add_trace(y = ~Property.Damage.Only.Collision,
name = "Property Damage Only Collisions",
hoverinfo = "text",
text = ~paste(Property.Damage.Only.Collision, "Property Damage Only Collisions"),
marker = list(color = "#ff4c4c")) %>%
add_trace(y = ~Injury.Collision,
name = "Injury Collisions",
hoverinfo = "text",
text = ~paste(Injury.Collision, "Injury Collisions"),
marker = list(color = "#cc0000")) %>%
add_trace(y = ~Serious.Injury.Collision,
name = "Serious Injury Collisions",
hoverinfo = "text",
text = ~paste(Serious.Injury.Collision, "Serious Injury Collisions"),
marker = list(color = "#7f0000")) %>%
add_trace(y = ~Fatality.Collision,
name = "Fatality Collisions",
hoverinfo = "text",
text = ~paste(Fatality.Collision, "Fatality Collisions"),
marker = list(color = "#000000")) %>%
layout(title = "Seattle Collisions 2004 - 2016",
xaxis = list(title = "Year"),
yaxis = list(title = "# of Collisions"),
barmode = "stack")
collisions <- read.csv('./data/SDOT_Collisions.csv', stringsAsFactors = F)
# remove rows with missing data
collisions <- collisions[complete.cases(collisions),]
#get year from datetime
collisions <- mutate(collisions, year = substr(collisions$INCDATE, 7, 10))
collisions <- group_by(collisions, year, SEVERITYDESC)
count <- summarise(collisions, count = n())
#get data for just 2004 - 2016
count <- count[4:68,]
#go wide for stacked bar chart
count.wide <- spread(count, SEVERITYDESC, count)
collisions <- read.csv('./data/SDOT_Collisions.csv', stringsAsFactors = F)
