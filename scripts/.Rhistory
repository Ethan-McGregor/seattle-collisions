v = filter(shooting.data, city == 'Orlando', state == 'Florida')  %>% select(killed == max(killed))
v = filter(shooting.data, city == 'Orlando', state == 'Florida',date == 'June 12, 2016')
v = filter(shooting.data, city == 'Orlando', state == 'Florida',date == 'June 12, 2016')  %>% select(killed)
filter(shooting.data, killed == 50, state == 'Florida')  %>% select(date)
number.of.affected.cities.washington[0,1]
number.of.affected.cities.washington[1,1]
number.of.affected.cities.washington[2,2]
most.affected.cities[2,2]
1,2
most.affected.cities[1,2]
View(most.affected.cities)
most.affected.cities['city'][1]
most.affected.cities['city'][0]
most.affected.cities[1]['city'][1]
most.affected.cities[1][1]
most.affected.cities[1,1]
library(shiny)
runApp('C:/Users/ermmc/OneDrive/Classes/201/m18-shiny/exercise-5')
install.packages(HSAUR)
install.packages(HSUAR)
install.packages("HSAUR")
#INFO 201 M18 Exercise 5 UI
#Require shiny
library(shiny)
data("womensrole", package = "HSAUR")
#Here you will define the functionality of your user interface
shinyUI(fluidPage(
# Add a descriptive application title
titlePanel("This app does cool things"),
# Here you will add the interactivity to your app
# Create a selectInput where the user can select either Men, Women, or Both.
# Create a selectInput where the user can select if they Agree or Disagree.
# Look at the Shiny documentation for selectInput and sliderInput syntax
# inputIDs's have been provided
sidebarLayout(
sidebarPanel(
#selectInput for Men, Women, or Both
#inputID = sex
#selectInput for Agree or Disagree
#inputID = thoughts
),
# Show a plot of the generated distribution
mainPanel(
#give your plot a descriptive name
plotOutput("plotNamehere")
)
)
))
library("HSAUR")
#INFO 201 M18 Exercise 5 UI
#Require shiny
library(shiny)
library("HSAUR")
data("womensrole", package = "HSAUR")
#Here you will define the functionality of your user interface
shinyUI(fluidPage(
# Add a descriptive application title
titlePanel("This app does cool things"),
# Here you will add the interactivity to your app
# Create a selectInput where the user can select either Men, Women, or Both.
# Create a selectInput where the user can select if they Agree or Disagree.
# Look at the Shiny documentation for selectInput and sliderInput syntax
# inputIDs's have been provided
sidebarLayout(
sidebarPanel(
#selectInput for Men, Women, or Both
#inputID = sex
#selectInput for Agree or Disagree
#inputID = thoughts
),
# Show a plot of the generated distribution
mainPanel(
#give your plot a descriptive name
plotOutput("plotNamehere")
)
)
))
data = data("womensrole", package = "HSAUR")
library(shiny)
library("HSAUR")
data = data("womensrole", package = "HSAUR")
#Here you will define the functionality of your user interface
shinyUI(
#INFO 201 M18 Exercise 5 UI
#Require shiny
library(shiny)
data = data("womensrole", package = "HSAUR")
#Here you will define the functionality of your user interface
shinyUI(fluidPage(
# Add a descriptive application title
titlePanel("This app does cool things"),
# Here you will add the interactivity to your app
# Create a selectInput where the user can select either Men, Women, or Both.
# Create a selectInput where the user can select if they Agree or Disagree.
# Look at the Shiny documentation for selectInput and sliderInput syntax
# inputIDs's have been provided
sidebarLayout(
sidebarPanel(
#selectInput for Men, Women, or Both
#inputID = sex
#selectInput for Agree or Disagree
#inputID = thoughts
),
# Show a plot of the generated distribution
mainPanel(
#give your plot a descriptive name
plotOutput("plotNamehere")
)
)
))
library(shiny)
data = data("womensrole", package = "HSAUR")
data("womensrole", package = "HSAUR")
data("womensrole", package = "HSAUR")
knitr::opts_chunk$set(echo = TRUE)
collison <- read.csv('data/SDOT_Collisions.csv')
library('leaflet')
library('stringr')
library('dplyr')
## creates interactive map
pal <- colorFactor(c("navy", "red","blue","green","yellow"), domain = c("ship", "pirate"))
#qpal <- colorQuantile("RdYlBu", shooting.data$killed, n = 3)
d = data.frame(str_split(as.character(collison$Shape), " ") )
long = data.frame(unlist(d[2,]))
lat = data.frame(unlist(d[1,]))
names(lat) = "lat"
names(long) = "long"
lat = as.vector(lat$lat)
long = as.vector(long$long)
lat = str_replace(lat, "\\(",  "")
lat = str_replace(lat, "\\)",  "")
lat = str_replace(lat, "\\,",  "")
long = str_replace(long, "\\,",  "")
long = str_replace(long, "\\(",  "")
long = str_replace(long, "\\)",  "")
ma = data.frame(lat,long)
ma = ma[!apply(ma == "", 1, all),]
sample =  sample_n(ma, 100)
lat = as.numeric(paste(sample$lat))
lng = as.numeric(paste(sample$long))
samp = data.frame(lat,lng)
m <- leaflet(data = samp) %>%
addTiles() %>%
addCircleMarkers(~lng, ~lat)
m
sample =  sample_n(ma, 100)
lat = as.numeric(paste(sample$lat))
lng = as.numeric(paste(sample$long))
samp = data.frame(lat,lng)
m <- leaflet(data = samp) %>%
addTiles() %>%
addCircleMarkers(~lng, ~lat)
m
sample =  sample_n(ma, 100)
lat = as.numeric(paste(sample$lat))
lng = as.numeric(paste(sample$long))
samp = data.frame(lat,lng)
m <- leaflet(data = samp) %>%
addTiles() %>%
addCircleMarkers(~lng, ~lat)
m
sample =  sample_n(ma, 100)
lat = as.numeric(paste(sample$lat))
lng = as.numeric(paste(sample$long))
samp = data.frame(lat,lng)
m <- leaflet(data = samp) %>%
addTiles() %>%
addCircleMarkers(~lng, ~lat)
m
View(ma)
View(d)
View(collison)
d = d[!apply(d == "", 1, all),]
View(d)
noNa = collison[!apply(collison == "", 1, all),]
noNa = collison$Shape[!apply(collison == "", 1, all),]
noNa = collison$Shape[!apply(collison$Shape == "", 1, all),]
noNa = collison[complete.cases(collison),]
View(noNa)
d = data.frame(str_split(as.character(noNa$Shape), " ") )
long = data.frame(unlist(d[2,]))
lat = data.frame(unlist(d[1,]))
names(lat) = "lat"
names(long) = "long"
lat = as.vector(lat$lat)
long = as.vector(long$long)
lat = str_replace(lat, "\\(",  "")
lat = str_replace(lat, "\\)",  "")
lat = str_replace(lat, "\\,",  "")
long = str_replace(long, "\\,",  "")
long = str_replace(long, "\\(",  "")
long = str_replace(long, "\\)",  "")
ma = data.frame(lat,long)
sample =  sample_n(ma, 1000)
sample =  sample_n(ma, 1000)
lat = as.numeric(paste(sample$lat))
lng = as.numeric(paste(sample$long))
samp = data.frame(lat,lng)
m <- leaflet(data = samp) %>%
addTiles() %>%
addCircleMarkers(~lng, ~lat)
m
noNa$lat = as.numeric(paste(ma$lat))
noNa$lng = as.numeric(paste(ma$lng))
noNa$lng = as.numeric(paste(ma$long))
library('leaflet')
library('stringr')
library('dplyr')
## creates interactive map
pal <- colorFactor(c("navy", "red","blue","green","yellow"), domain = c("ship", "pirate"))
#qpal <- colorQuantile("RdYlBu", shooting.data$killed, n = 3)
# remove rows with missing data
noNa = collison[complete.cases(collison),]
d = data.frame(str_split(as.character(noNa$Shape), " ") )
long = data.frame(unlist(d[2,]))
lat = data.frame(unlist(d[1,]))
names(lat) = "lat"
names(long) = "long"
lat = as.vector(lat$lat)
long = as.vector(long$long)
lat = str_replace(lat, "\\(",  "")
lat = str_replace(lat, "\\)",  "")
lat = str_replace(lat, "\\,",  "")
long = str_replace(long, "\\,",  "")
long = str_replace(long, "\\(",  "")
long = str_replace(long, "\\)",  "")
ma = data.frame(lat,long)
noNa$lat = as.numeric(paste(ma$lat))
noNa$lng = as.numeric(paste(ma$long))
sample =  sample_n(noNa, 1000)
m <- leaflet(data = sample) %>%
addTiles() %>%
addCircleMarkers(~lng, ~lat)
m
sample =  sample_n(noNa, 500)
m <- leaflet(data = sample) %>%
addTiles() %>%
addCircleMarkers(~lng, ~lat)
m
shiny::runApp('C:/Users/ermmc/Desktop/seattle-collisions')
plotlyOutput("heat")
leafletOutput("heat")
library('leaflet')
library('stringr')
library('dplyr')
sliderInput("integer", "Number of Variables", min=2, max=10, value=500)
renderPlot({
leaflet(data = input$integer) %>%
addTiles() %>%
addCircleMarkers(~lng, ~lat)
})
knitr::opts_chunk$set(echo = TRUE)
library('leaflet')
library('stringr')
library('dplyr')
sliderInput("integer", "Number of Variables", min=2, max=10, value=500)
renderPlot({
leaflet(data = input$integer) %>%
addTiles() %>%
addCircleMarkers(~lng, ~lat)
})
library('leaflet')
library('stringr')
library('dplyr')
sliderInput("integer", "Number of Variables", min=2, max=10, value=500)
renderLeaflet({
leaflet(data = input$integer) %>%
addTiles() %>%
addCircleMarkers(~lng, ~lat)
})
library('leaflet')
library('stringr')
library('dplyr')
sliderInput("integer", "Number of Variables", min=2, max=10, value=500)
renderLeaflet({
leaflet(data = input$integer) %>%
addTiles() %>%
addCircleMarkers(~lng, ~lat)
})
library('leaflet')
library('stringr')
library('dplyr')
sliderInput("integer", "Number of Variables", min=2, max=10, value=500)
renderLeaflet({
leaflet(data = input$integer) %>%
addTiles() %>%
addCircleMarkers(~lng, ~lat)
})
runApp('C:/Users/ermmc/Desktop/seattle-collisions')
knitr::opts_chunk$set(echo = TRUE)
collison <- read.csv('data/SDOT_Collisions.csv')
library('leaflet')
library('stringr')
library('dplyr')
## creates interactive map
pal <- colorFactor(c("navy", "red","blue","green","yellow"), domain = c("ship", "pirate"))
#qpal <- colorQuantile("RdYlBu", shooting.data$killed, n = 3)
# remove rows with missing data
noNa = collison[complete.cases(collison),]
d = data.frame(str_split(as.character(noNa$Shape), " ") )
long = data.frame(unlist(d[2,]))
lat = data.frame(unlist(d[1,]))
names(lat) = "lat"
names(long) = "long"
lat = as.vector(lat$lat)
long = as.vector(long$long)
lat = str_replace(lat, "\\(",  "")
lat = str_replace(lat, "\\)",  "")
lat = str_replace(lat, "\\,",  "")
long = str_replace(long, "\\,",  "")
long = str_replace(long, "\\(",  "")
long = str_replace(long, "\\)",  "")
ma = data.frame(lat,long)
noNa$lat = as.numeric(paste(ma$lat))
noNa$lng = as.numeric(paste(ma$long))
sample =  sample_n(noNa, 500)
m <- leaflet(data = sample) %>%
addTiles() %>%
addCircleMarkers(~lng, ~lat)
m
knitr::opts_chunk$set(echo = TRUE)
collison <- read.csv('data/SDOT_Collisions.csv')
library('leaflet')
library('stringr')
library('dplyr')
## creates interactive map
pal <- colorFactor(c("navy", "red","blue","green","yellow"), domain = c("ship", "pirate"))
#qpal <- colorQuantile("RdYlBu", shooting.data$killed, n = 3)
# remove rows with missing data
noNa = collison[complete.cases(collison),]
d = data.frame(str_split(as.character(noNa$Shape), " ") )
long = data.frame(unlist(d[2,]))
lat = data.frame(unlist(d[1,]))
knitr::opts_chunk$set(echo = TRUE)
collison <- read.csv('data/SDOT_Collisions.csv')
library('leaflet')
library('stringr')
library('dplyr')
## creates interactive map
pal <- colorFactor(c("navy", "red","blue","green","yellow"), domain = c("ship", "pirate"))
#qpal <- colorQuantile("RdYlBu", shooting.data$killed, n = 3)
# remove rows with missing data
noNa = collison[complete.cases(collison),]
d = data.frame(str_split(as.character(noNa$Shape), " ") )
long = data.frame(unlist(d[2,]))
lat = data.frame(unlist(d[1,]))
names(lat) = "lat"
names(long) = "long"
lat = as.vector(lat$lat)
long = as.vector(long$long)
lat = str_replace(lat, "\\(",  "")
lat = str_replace(lat, "\\)",  "")
lat = str_replace(lat, "\\,",  "")
long = str_replace(long, "\\,",  "")
long = str_replace(long, "\\(",  "")
long = str_replace(long, "\\)",  "")
ma = data.frame(lat,long)
noNa$lat = as.numeric(paste(ma$lat))
noNa$lng = as.numeric(paste(ma$long))
sample =  sample_n(noNa, 500)
m <- leaflet(data = sample) %>%
addTiles() %>%
addCircleMarkers(~lng, ~lat)
m
View(collison)
View(sample)
m <- leaflet(data = sample) %>%
addTiles() %>%
addCircleMarkers(~lng, ~lat, radius = ~FATALTIES * 2)
m <- leaflet(data = sample) %>%
addTiles() %>%
addCircleMarkers(~lng, ~lat, radius = ~FATALITIES * 2)
m
m <- leaflet(data = sample) %>%
addTiles() %>%
addCircleMarkers(~lng, ~lat, radius = ~FATALITIES +1 * 2)
m
m <- leaflet(data = sample) %>%
addTiles() %>%
addCircleMarkers(~lng, ~lat, radius = ~INJURIES +1 * 2)
m
m <- leaflet(data = sample) %>%
addTiles() %>%
addCircleMarkers(~lng, ~lat, radius = ~INJURIES + 5 * 2)
m
m <- leaflet(data = sample) %>%
addTiles() %>%
addCircleMarkers(~lng, ~lat, radius = ~INJURIES + 2 * 2)
m
View(collison)
View(sample)
library("rpart")
collison <- read.csv('data/SDOT_Collisions.csv')
setwd("C:/Users/ermmc/Desktop/seattle-collisions/scripts")
collison <- read.csv('data/SDOT_Collisions.csv')
collison <- read.csv('../data/SDOT_Collisions.csv')
collison <- read.csv('../data/SDOT_Collisions.csv')
sample <- sample_n(collison, 500)
library("rpart")
library('plotly')
library('shiny')
library('leaflet')
library('stringr')
library('dplyr')
sample <- sample_n(collison, 500)
View(sample)
class = rpart(class ~ FATALITIES + LIGHTCON,
data = sample)
class = rpart(class ~ FATALITIES + LIGHTCOND,
data = sample)
class = rpart(class ~ FATALITIES + count(LIGHTCOND),
data = sample)
class = rpart(class ~ FATALITIES ,
data = sample)
class = rpart(class ~ FATALITIES ,
data = sample)
class = rpart(FATALITIES ~ DISTANCE + PEDCOUNT ,
data = sample)
plot(class)
predict(class)
predict(class, type = "prob") )
predict(class, type = "prob")
predict(class, type = "prob")
plot(predict(class) )
class = rpart(FATALITIES ~ DISTANCE + VEHCOUNT ,
data = sample)
plot(predict(class) )
class = rpart(FATALITIES ~ DISTANCE + VEHCOUNT ,
data = sample)
plot(predict(class) )
sample <- sample_n(collison, 500)
class = rpart(FATALITIES ~ DISTANCE + VEHCOUNT ,
data = sample)
plot(predict(class) )
sample <- sample_n(collison, 500)
class = rpart(FATALITIES ~ DISTANCE + VEHCOUNT ,
data = sample)
plot(predict(class) )
sample <- sample_n(collison, 500)
class = rpart(FATALITIES ~ DISTANCE + VEHCOUNT ,
data = sample)
plot(predict(class) )
sample <- sample_n(collison, 500)
class = rpart(FATALITIES ~ DISTANCE + VEHCOUNT ,
data = sample)
plot(predict(class) )
sample <- sample_n(collison, 500)
class = rpart(FATALITIES ~ DISTANCE + VEHCOUNT ,
data = sample)
plot(predict(class) )
sample <- sample_n(collison, 500)
class = rpart(FATALITIES ~ DISTANCE + VEHCOUNT ,
data = sample)
plot(predict(class) )
sample <- sample_n(collison, 500)
class = rpart(FATALITIES ~ DISTANCE + VEHCOUNT ,
data = sample)
plot(predict(class) )
sample <- sample_n(collison, 500)
class = rpart(FATALITIES ~ DISTANCE + VEHCOUNT ,
data = sample)
plot(predict(class) )
class = rpart(INJURIES ~ DISTANCE + VEHCOUNT ,
data = sample)
plot(predict(class) )
predict(class)
col <- read.csv('../data/SDOT_Collisions.csv')
data = data.frame(col$INJURIES,col$DISTANCE,col$VEHCOUNT)
train<-data[dt,]
dt = sort(sample(nrow(data), nrow(data)*.7))
train<-data[dt,]
test<-data[-dt,]
class = rpart(INJURIES ~ DISTANCE + VEHCOUNT ,
data = train)
dt = sort(sample(nrow(data), nrow(data)*.7))
View(data)
data = data.frame(col$INJURIES,col$DISTANCE,col$VEHCOUNT)
dt = sort(sample(nrow(data), nrow(data)*.7))
trainindex <- sample(data, trunc(length(data)/2))
train<-data[dt,]
test<-data[-dt,]
class = rpart(INJURIES ~ DISTANCE + VEHCOUNT ,
data = train)
View(train)
class = rpart(col.INJURIES ~ col.DISTANCE + col.VEHCOUNT ,
data = train)
predict(class,test)
plot(predict(class,test) )
pre <- predict(class,test)
actual <- test$INJURIES
rsq <- 1-sum((actual-pre)^2)/sum((actual-mean(actual))^2)
print(rsq)
pre <- predict(class,test)
actual <- test$INJURIES
actual <- test$col.INJURIES
rsq <- 1-sum((actual-pre)^2)/sum((actual-mean(actual))^2)
print(rsq)
print(pre)
rsq <- 1-sum((actual-pre)^2)/sum((actual-mean(actual))^2)
print(rsq)
rsq <- sqrt( mean( (actual-pre)^2 , na.rm = TRUE ) )
print(rsq)
pre <- predict(class,test)
actual <- test$col.INJURIES
rsq <- 1-sum((actual-pre)^2)/sum((actual-mean(actual))^2)
print(rsq)
pre <- predict(class,test)
actual <- test$col.INJURIES
rsq <- 1-sum((actual-pre)^2)/sum((actual-mean(actual))^2)
rmse <- rsq <- sqrt( mean( (actual-pre)^2 , na.rm = TRUE ) )
print(rsq)
print(rmse)
